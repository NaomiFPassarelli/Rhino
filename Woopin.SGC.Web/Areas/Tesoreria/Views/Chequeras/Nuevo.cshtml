@model Woopin.SGC.Model.Tesoreria.Chequera

@{
    Layout = null;
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <div id="Alert-Dialog-Container"></div>
    <fieldset class="form-horizontal">
        <div class="form-group @if (!ViewData.ModelState.IsValidField("Nombre"))
                    { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Nombre, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Nombre, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CuentaBancaria.Nombre, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.CuentaBancaria.Id, new SelectList(ViewBag.CuentasBancarias, "Id", "Nombre"), "Elegir un Cuenta Bancaria", new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CuentaBancaria.Id, null, new { @class = "help-block" })

            </div>
        </div>
        <div class="form-group @if (!ViewData.ModelState.IsValidField("NumeroDesde"))
                    { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.NumeroDesde, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.NumeroDesde, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.NumeroDesde, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group @if (!ViewData.ModelState.IsValidField("NumeroHasta"))
                    { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.NumeroHasta, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.NumeroHasta, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.NumeroHasta, null, new { @class = "help-block" })
            </div>
        </div>
        
    </fieldset>
}
<div class="button-pane clearfix">
    <div class="button-set">
        <a class="boton place-left" id="BtnSubmitChequera" title="Guardar">
            <i class="fa fa-check-circle-o i-green"></i> Crear Chequera
        </a>
        <a class="boton place-left" title="Cancelar" onclick="$.CloseOpenedDialog()">
            <i class="fa fa-times-circle-o i-red"></i>  Cancelar
        </a>
    </div>
</div>
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/Scripts/jquery.mask.min.js")
<script type="text/javascript">

    var NuevaChequera = {

        ChequearDesdeHasta: function () {
            
            if ($('#NumeroDesde').val() != "" && $('#NumeroHasta').val() != "" && parseFloat($.parseCurrency($('#NumeroHasta').val())) < parseFloat($.parseCurrency($('#NumeroDesde').val()))) {
                return $('#Alert-Dialog-Container').NewAlert('error', 'Es necesario que el Numero Hasta sea mayor al Desde');
            }
            NuevaChequera.Save();
        },


        Save: function(){    
            if ($('#BtnSubmitChequera').attr('disabled') == "disabled" || $('#BtnSubmitChequera').attr('disabled') == true)
                return;

            $('#BtnSubmitChequera').attr('disabled', 'disabled');
            var Chequera = $('form').serializeFormJSON();
            
            var postParams = {
                url: "@Url.Action("Nuevo")",
                data: { Chequera: Chequera },
                success: function (data) {
                    if (data.Success) {
                            data.Chequera["CuentaBancaria.Nombre"] = data.Chequera.CuentaBancaria.Nombre;
                            $('#GridChequeras').jqGrid('addRowData', 'Id', data.Chequera);
                            $('#GridChequeras').trigger("reloadGrid");
                            _OpenDialog.dialog('close');
                            msg = "La operación fue existosa";
                            $.WarningDialog(msg, "success");
                        }
                    else {
                        $('#BtnSubmitChequera').removeAttr('disabled');
                            $('#Alert-Dialog-Container').NewAlert('error', $.makeErrorMsgList(data.ErrorMessage, data.Errors));
                        }
                    }
                }
        
            $.AjaxPost(postParams);
        }
    }

    $(document).ready(function () {
        $('#CuentaBancaria_Id').attr('data-val-required', 'Es necesario una cuenta bancaria');
        $('form').reParseForm();
        $('#BtnSubmitChequera').click(NuevaChequera.ChequearDesdeHasta);
        
    });
</script>
