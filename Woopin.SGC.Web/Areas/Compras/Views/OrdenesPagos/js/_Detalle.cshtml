@using Woopin.SGC.Model.Compras
@using Woopin.SGC.Common.Json;

@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/jqgrid")
@Scripts.Render("~/Scripts/jquery.mask.min.js")
@Scripts.Render("~/bundles/jqueryui")
@Html.Partial("~/Areas/Tesoreria/Views/Valores/js/_IngresoValores.cshtml");
<script type="text/javascript">
    var DetalleOrdenPago = {
        init: function () {
            $('#GridDetallesOrden').CreateCommonGrid({
                datatype: 'local',
                colNames: ['', '', 'Fecha', 'Número de Comprobante', 'Total', 'Total Abonado', 'Importe Pagado',''],
                colModel: [
                    { name: 'Id', index: 'Id', width: 0, sortable: false, hidden: true, key: true },
                    { name: 'ComprobanteCompra.Id', index: 'ComprobanteCompra.Id', width: 0, sortable: false, hidden: true, key: true },
                    { name: 'ComprobanteCompra.Fecha', index: 'ComprobanteCompra.Fecha', width: 30, align: "center", sortable: true, formatter: 'date', formatoptions: { newformat: 'd/m/Y' } },
                    { name: 'ComprobanteCompra.Numero', index: 'ComprobanteCompra.Numero', width: 30, align: "center", sortable: true, formatter: DetalleOrdenPago.formatterLetrayNumero },
                    { name: 'ComprobanteCompra.Total', index: 'ComprobanteCompra.Total', width: 20, align: "center", sortable: true, formatter: $.formatCurrency },
                    { name: 'Pagado', index: 'Pagado', width: 20, align: "center", sortable: true, formatter: $.formatCurrency },
                    { name: 'Importe', index: 'Importe', width: 20, align: "center", sortable: true, formatter: $.formatCurrency },
                    { name: 'ComprobanteCompra.Letra', index: 'ComprobanteCompra.Letra', width: 30, hidden: true, sortable: true },
                ],
                sortname: 'Numero',
                sortorder: "asc",
                pager: '#GridDetallesOrden_pager',
                rowList: [5, 10, 15],
                rowNum: 5,
                data: @Html.Raw(JsonHelper.ToJson(Model.Comprobantes))
            });
            $('#GridDetallesOrden').trigger("reloadGrid");
            $("#GridDetallesOrden").parents('div.ui-jqgrid-bdiv').css("max-height", "150px");
            IngresoValores.InitDetalle('#GridPagosOrden');
            IngresoValores.Grid.jqGrid("setGridParam", {
                data:@Html.Raw(JsonHelper.ToJson(((OrdenPago)Model).Pagos.Select(x => x.Valor)))
            });
            IngresoValores.Grid.trigger("reloadGrid");
            $(document).on('click', '.BtnEliminar', DetalleOrdenPago.AnularComprobante);
        },

        AnularComprobante: function () {
            
            //var Id = $(this).closest('tr').attr('id');
            var Id = $('.BtnEliminar').data("id");
            ConfirmationDialog.Show("Esta seguro que desea cancelar la orden de pago?",
                                    function () {  DetalleOrdenPago.EliminarComprobante(Id) });
        },

        EliminarComprobante: function (Id) {
            var params = {
                url: '@Url.Action("CancelarOrdenPago")',
                data: { IdOrdenPago: Id },
                success: function (ret) {
                    
                    if (ret.Success && ret.Data != null) {
                        $.WarningDialog(ret.Data, "success");
                        @if (!ViewBag.OpensDialog)
                        {
                            @:$.ShowLoader();
                            @:window.location.reload();
                        }
                    }
                    else {
                        $.WarningDialog(ret.ErrorMessage);
                    }
                }
            }
            $.AjaxPost(params);
        },

        formatterLetrayNumero: function(cellvalue, options, rowObject){
            return rowObject.ComprobanteCompra.Letra + rowObject.ComprobanteCompra.Numero;
        }
    }
    $(document).ready(function () {
        DetalleOrdenPago.init();
    });
</script>
