@model Woopin.SGC.Model.Ventas.Cliente

@{
    ViewBag.Title = "Editar Cliente";
    ViewBag.SectionIcon = "building-o";
    ViewBag.SectionTitle = "Editar Cliente";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)
    <fieldset class="form-horizontal">
        <div class="form-group">
            <div class="col-md-10">
                <a class="boton place-left" id="BtnSubmit"><i class="fa fa-save i-green"></i> Guardar Cambios</a>
                <a class="boton place-left" href="@Url.Action("Index")"><i class="fa fa-arrow-left i-red"></i> Volver al Listado</a>
            </div>
        </div>
        <div class="form-group @if (!ViewData.ModelState.IsValidField("RazonSocial"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.RazonSocial, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.RazonSocial, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.RazonSocial, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("CUIT"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.CUIT, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.CUIT, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CUIT, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("CategoriaIva"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.CategoriaIva, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.CategoriaIva.Id, (IEnumerable<SelectListItem>)ViewBag.CategoriasIva, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CategoriaIva, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Direccion"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Direccion, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Direccion, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Direccion, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Numero, new { @class = "col-md-6 horizontal-label" })
                <div class="col-md-6 input-container">
                    @Html.TextBoxFor(model => model.Numero, new { @class = "textinput" })
                    @Html.ValidationMessageFor(model => model.Numero, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="col-md-2" style="padding:0;">
                @Html.LabelFor(model => model.Departamento, new { @class = "col-md-7 horizontal-label" })
                <div class="col-md-5 input-container">
                    @Html.TextBoxFor(model => model.Departamento, new { @class = "textinput" })
                    @Html.ValidationMessageFor(model => model.Departamento, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.Piso, new { @class = "col-md-6 horizontal-label" })
                <div class="col-md-6 input-container">
                    @Html.TextBoxFor(model => model.Piso, new { @class = "textinput" })
                    @Html.ValidationMessageFor(model => model.Piso, null, new { @class = "help-block" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CodigoPostal, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-3 input-container">
                @Html.TextBoxFor(model => model.CodigoPostal, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CodigoPostal, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Localidad, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Localidad, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Localidad, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Localizacion, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.Localizacion.Id, (IEnumerable<SelectListItem>)ViewBag.Localizaciones, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Localizacion, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Telefono, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-3 input-container">
                @Html.TextBoxFor(model => model.Telefono, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Telefono, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Email, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Email, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CondicionVenta, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.CondicionVenta.Id, (IEnumerable<SelectListItem>)ViewBag.Condiciones, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CondicionVenta, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Master, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @{
                    var MasterId = Model.Master == null ? "" : Model.Master.Id.ToString();
                    var MasterNombre = Model.Master == null ? "" : Model.Master.Nombre.ToString();
                }
                <input type="hidden" id="Master_Id" name="Master.Id" class="selectinput" value="@MasterId" data-text="@MasterNombre" />
            </div>
            <a class="boton boton-i place-left" id="ClearSelect2" title="Limpiar">
                <i class="fa fa-eraser i-blue"></i>
            </a>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CondicionVentaEstadistica, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-3 input-container">
                @Html.TextBoxFor(model => model.CondicionVentaEstadistica, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CondicionVentaEstadistica, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CondicionVentaContratada, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-3 input-container">
                @Html.TextBoxFor(model => model.CondicionVentaContratada, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CondicionVentaContratada, null, new { @class = "help-block" })
            </div>
        </div>
    </fieldset>
}
@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/select2")
    @Styles.Render("~/Scripts/select2/select2.css")
    <script type="text/javascript">
        $(document).ready(function () {
            $('#ClearSelect2').click(function () {
                $("#Master_Id").select2("val", "");
            });
            $('#CondicionVentaEstadistica').attr('data-val-number', 'La Condicion de Venta Estadistica debe ser un numero');
            $('#CondicionVentaContratada').attr('data-val-number', 'La Condicion de Venta Contratada debe ser un número');
            $('form').reParseForm();
            $('#Master_Id').prepend('<option></option>');
            $('#Master_Id').select2(
                {
                    placeholder: "Si Corresponde, Seleccione Un Grupo Economico",
                    minimumInputLength: 0,
                    initSelection: function (element, callback) {
                        // En caso de necesitar un modelo complejo deberia realizar un post para obtener el campo texto.
                        // Post con Id = element.val(), devuelve el texto del select2
                        callback({ id: element.val(), text: element.data('text') });
                    },
                    ajax: {
                        url: "@Url.Action("GetCombo", "GrupoEconomico")",
                        dataType: 'json',
                        params: { type: "POST" },
                        data: function (t, p) {
                            return { page: 0 };
                        },
                        results: function (data, page) {
                            return { results: data.Data.Items };
                        }
                    }
                });
            $('#BtnSubmit').FormSubmit({
                enter: true,
                success: function (data) {
                    if (data.Success) {
                        $('#Alert-Container').NewAlert('success', 'Se ha guardado el cliente con exito');
                    }
                    else {
                        $('#Alert-Container').NewAlert('error', $.makeErrorMsgList(data.ErrorMessage, data.Errors));
                    }
                }
            });
        });
</script>

}
