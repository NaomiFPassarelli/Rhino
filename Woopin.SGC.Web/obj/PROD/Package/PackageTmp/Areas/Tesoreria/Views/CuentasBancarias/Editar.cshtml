@model Woopin.SGC.Model.Tesoreria.CuentaBancaria

@{
    Layout = null;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.CuentaContable.Id)
    @Html.HiddenFor(model => model.Moneda.Id)
    @Html.HiddenFor(model => model.Fondo)
    @Html.HiddenFor(model => model.Organizacion.Id)
    <fieldset class="form-horizontal">

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Numero"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Numero, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Numero, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Numero, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Nombre"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Nombre, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Nombre, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Banco"))
                                { @Html.Raw("has-error");
                                }">
            @Html.LabelFor(model => model.Banco, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.Banco.Id, new SelectList(ViewBag.Bancos, "Id", "Nombre", ViewBag.Bancos_Id = Model.Id), "Elegir un banco", new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Banco.Id, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group @if (!ViewData.ModelState.IsValidField("EmiteCheques"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.EmiteCheques, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                <input class="textinput" id="EmiteCheques" name="EmiteCheques" type="checkbox" value="true" @if (Model.EmiteCheques)
                                                                                                            { @Html.Raw("checked")    ; }>
                @Html.ValidationMessageFor(model => model.EmiteCheques, null, new { @class = "help-block" })
            </div>
        </div>
    </fieldset>
}
<div class="button-pane clearfix">
    <div class="button-set">
        <a class="boton place-left" id="BtnSubmit" title="Guardar">
            <i class="fa fa-check-circle-o i-green"></i> Guardar Cuenta Bancaria
        </a>
        <a class="boton place-left" title="Cancelar" onclick="$.CloseOpenedDialog()">
            <i class="fa fa-times-circle-o i-red"></i>  Cancelar
        </a>
    </div>
</div>
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            $('#Banco_Id').attr('data-val-required', 'Es necesario un banco');
            $('form').reParseForm();
            $('#BtnSubmit').FormSubmit({
                enter: true,
                success: function (data) {
                    if (data.Success) {
                        var rowData = $('#GridCuentasBancarias').jqGrid('getRowData', data.CuentaBancaria.Id);
                        rowData.Nombre = data.CuentaBancaria.Nombre;
                        rowData.Numero = data.CuentaBancaria.Numero;
                        rowData["Banco.Nombre"] = data.CuentaBancaria.Banco.Nombre;
                        $('#GridCuentasBancarias').jqGrid('setRowData', data.CuentaBancaria.Id, rowData);
                        _OpenDialog.dialog('close');
                    }
                    else {
                        $('#Alert-Container').NewAlert('error', $.makeErrorMsgList(data.ErrorMessage, data.Errors));
                    }
                }
            });
        });
    </script>
