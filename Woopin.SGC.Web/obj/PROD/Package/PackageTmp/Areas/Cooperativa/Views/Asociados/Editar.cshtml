@model Woopin.SGC.Model.Cooperativa.Asociado

@{
    ViewBag.Title = "Editar Asociado";
    ViewBag.SectionIcon = "truck";
    ViewBag.SectionTitle = "Editar Asociado";
}
@using (Html.BeginForm("Editar", "Asociados", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)
    <fieldset class="form-horizontal">
        <div class="form-group">
            <div class="col-md-10">
                <a class="boton place-left" id="BtnSubmit"><i class="fa fa-save i-green"></i> Guardar Cambios</a>
                <a class="boton place-left" href="@Url.Action("Index")"><i class="fa fa-arrow-left i-red"></i> Volver al Listado</a>
            </div>
        </div>
        <div class="form-group @if (!ViewData.ModelState.IsValidField("Nombre"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Nombre, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Nombre, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Apellido"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Apellido, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Apellido, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Apellido, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("CUIT"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.CUIT, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.CUIT, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CUIT, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("DNI"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.DNI, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.DNI, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.DNI, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("CI"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.CI, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.CI, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CI, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("LE"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.LE, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.LE, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.LE, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("LC"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.LC, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.LC, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.LC, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Direccion"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Direccion, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Direccion, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Direccion, null, new { @class = "help-block" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Numero, new { @class = "col-md-6 horizontal-label" })
                <div class="col-md-6 input-container">
                    @Html.TextBoxFor(model => model.Numero, new { @class = "textinput" })
                    @Html.ValidationMessageFor(model => model.Numero, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="col-md-2" style="padding:0;">
                @Html.LabelFor(model => model.Departamento, new { @class = "col-md-7 horizontal-label" })
                <div class="col-md-5 input-container">
                    @Html.TextBoxFor(model => model.Departamento, new { @class = "textinput" })
                    @Html.ValidationMessageFor(model => model.Departamento, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.Piso, new { @class = "col-md-6 horizontal-label" })
                <div class="col-md-6 input-container">
                    @Html.TextBoxFor(model => model.Piso, new { @class = "textinput" })
                    @Html.ValidationMessageFor(model => model.Piso, null, new { @class = "help-block" })
                </div>
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("CodigoPostal"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.CodigoPostal, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-3 input-container">
                @Html.TextBoxFor(model => model.CodigoPostal, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CodigoPostal, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Localizacion"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Localizacion, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.Localizacion.Id, (IEnumerable<SelectListItem>)ViewBag.Localizaciones, null, new { @class = "textinput", @data_val_required = false, @data_val_number = false })
                @Html.ValidationMessageFor(model => model.Localizacion, null, new { @class = "help-block" })
            </div>
        </div>


        <div class="form-group @if (!ViewData.ModelState.IsValidField("Nacionalidad"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Nacionalidad, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.Nacionalidad.Id, (IEnumerable<SelectListItem>)ViewBag.Nacionalidades, null, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Nacionalidad, null, new { @class = "help-block" })
            </div>
        </div>

        @*<div class="form-group @if (!ViewData.ModelState.IsValidField("LugarNacimiento"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.LugarNacimiento, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.LugarNacimiento.Id, (IEnumerable<SelectListItem>)ViewBag.Localizaciones, null, new { @class = "textinput", @data_val_required = false, @data_val_number = false })
                @Html.ValidationMessageFor(model => model.LugarNacimiento, null, new { @class = "help-block" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.FechaNacimiento, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                <input class="text-box single-line textinput" data-val="true" id="FechaNacimiento" name="FechaNacimiento" type="text" value="@DateTime.Now.ToString("dd/MM/yyyy")">
                @Html.ValidationMessageFor(model => model.FechaNacimiento, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Padre"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Padre, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Padre, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Padre, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Madre"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Madre, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Madre, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Madre, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Telefono"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Telefono, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Telefono, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Telefono, null, new { @class = "help-block" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.EstadoCivil, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.DropDownListFor(model => model.EstadoCivil.Id, (IEnumerable<SelectListItem>)ViewBag.EstadosCivil, null, new { @class = "textinput" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("NroCarnetConductor"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.NroCarnetConductor, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.NroCarnetConductor, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.NroCarnetConductor, null, new { @class = "help-block" })
            </div>
        </div>


        <div class="form-group @if (!ViewData.ModelState.IsValidField("CategoriaConductor"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.CategoriaConductor, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.CategoriaConductor, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CategoriaConductor, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("MarcaVehiculo"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.MarcaVehiculo, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.MarcaVehiculo, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.MarcaVehiculo, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("ModeloVehiculo"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.ModeloVehiculo, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.ModeloVehiculo, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.ModeloVehiculo, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("NroChapaVehiculo"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.NroChapaVehiculo, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.NroChapaVehiculo, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.NroChapaVehiculo, null, new { @class = "help-block" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.FechaIngreso, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                <input class="text-box single-line textinput" data-val="true" data-val-required="La Fecha de Ingreso es requerida" id="FechaIngreso" name="FechaIngreso" type="text" value="@DateTime.Now.ToString("dd/MM/yyyy")">
                @Html.ValidationMessageFor(model => model.FechaIngreso, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaNotificacion, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                <input class="text-box single-line textinput" data-val="true" data-val-required="La Fecha de Notificacion es requerida" id="FechaNotificacion" name="FechaNotificacion" type="text" value="@DateTime.Now.ToString("dd/MM/yyyy")">
                @Html.ValidationMessageFor(model => model.FechaNotificacion, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaEgreso, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                <input class="text-box single-line textinput" data-val="true" id="FechaEgreso" name="FechaEgreso" type="text">
                @Html.ValidationMessageFor(model => model.FechaEgreso, null, new { @class = "help-block" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.FechaActaIngreso, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                <input class="text-box single-line textinput" data-val="true" id="FechaActaIngreso" name="FechaActaIngreso" type="text" value="@DateTime.Now.ToString("dd/MM/yyyy")">
                @Html.ValidationMessageFor(model => model.FechaActaIngreso, null, new { @class = "help-block" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.CantidadAbonos, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.CantidadAbonos, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.CantidadAbonos, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImporteAbono, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.ImporteAbono, "{0:0.00}", new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.ImporteAbono, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImportePago, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.ImportePago, "{0:0.00}", new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.ImportePago, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("RecomendadoPor"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.RecomendadoPor, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.RecomendadoPor, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.RecomendadoPor, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @if (!ViewData.ModelState.IsValidField("Cargo"))
                        { @Html.Raw("has-error");}">
            @Html.LabelFor(model => model.Cargo, new { @class = "col-md-2 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.TextBoxFor(model => model.Cargo, new { @class = "textinput" })
                @Html.ValidationMessageFor(model => model.Cargo, null, new { @class = "help-block" })
            </div>
        </div>

        @*TODO ver de poner un aviso de que hasta 4MB se puede*@
        <div class="form-group">
            @Html.LabelFor(model => model.ImagePath, new { @class = "col-md-4 horizontal-label" })
            <div class="col-md-6 input-container">
                @Html.HiddenFor(model => model.ImagePath, new { @id = "ImagePathLast" })
                @if (Model.ImagePath != null)
                {
                    <img src="@Url.Content("~/" + @Model.ImagePath)" />
                }
                <input id="ImagePath" title="Imagen de la organizacion" type="file" name="ImagePath" />
                @Html.ValidationMessageFor(model => model.ImagePath, null, new { @class = "help-block" })
            </div>
        </div>


    </fieldset>
}
@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/select2")
    @Styles.Render("~/Scripts/select2/select2.css")
    @Scripts.Render("~/Scripts/jquery.mask.min.js")
@Scripts.Render("~/bundles/jqueryui")
    <script type="text/javascript">
        $.SetupUniqueNonQuitableForm('Esta saliendo de la creacion de Asociado. Si presiona Aceptar, todos los cambios realizados se perderan.');
        $(document).ready(function () {
            $("#FechaIngreso").datepicker({ dateFormat: 'dd/mm/yy' });
            $("#FechaEgreso").datepicker({ dateFormat: 'dd/mm/yy' });
            $("#FechaActaIngreso").datepicker({ dateFormat: 'dd/mm/yy' });
            $("#FechaNacimiento").datepicker({ dateFormat: 'dd/mm/yy' });
            $("#FechaNotificacion").datepicker({ dateFormat: 'dd/mm/yy' });
            $('#CUIT').mask('99-99999999-9');
            $('#DNI').mask('99999999');
            if(!'@ViewBag.EditableAlta'){
                $("#FechaIngreso").attr('readonly', 'readonly');
                $("#FechaActaIngreso").attr('readonly', 'readonly');
            }
            if(!'@ViewBag.EditableBaja')
            {
                $("#FechaEgreso").attr('readonly', 'readonly');
            }

            $('#BtnSubmit').FormSubmit({
                enter: true,
                success: function (data) {
                    if (data.Success) {
                        $('#Alert-Container').NewAlert('success', 'Se han guardado los cambios con exito!');
                    }
                    else {
                        $('#Alert-Container').NewAlert('error', $.makeErrorMsgList(data.ErrorMessage, data.Errors));
                    }
                }
            });
        });
</script>
}
