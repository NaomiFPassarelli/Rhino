@using Woopin.SGC.Model.Tesoreria
@using Woopin.SGC.Common.HtmlHelper
@using Woopin.SGC.Common.HtmlModel
@model Woopin.SGC.Model.Compras.OrdenPago

@{
    ViewBag.Title = "Nueva Orden de Pago";
    ViewBag.SectionIcon = "check-square-o";
    ViewBag.SectionTitle = "Nueva Orden de Pago";
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "comprobante-header" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset class="form-horizontal">
        <div>
            <div class="col-md-10">
                <a class="boton place-left" id="BtnSubmit"><i class="fa fa-check-circle-o i-green"></i> Crear Orden de Pago</a>
                <a class="boton place-left" href="@Url.Action("Index")"><i class="fa fa-arrow-left i-red"></i> Volver al Listado</a>
            </div>
        </div>
        <div class="comprobante">
            <div class="col-md-12">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Proveedor, new { @class = "col-md-3 horizontal-label" })
                    <div class="col-md-9 input-container">
                        <div class="row">
                            <input type="text" id="ProveedorID" name="ProveedorID" class="col-md-2" style="margin-top: 7px;" />
                            <div class="col-md-10" style="padding:0;">
                                <input type="hidden" id="Proveedor_Id" name="Proveedor.Id" class="selectinput" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Numero, new { @class = "col-md-4 horizontal-label readonly-label" })
                    <div class="col-md-8 input-container">
                        @Html.TextBoxFor(model => model.Numero, new { @class = "textinput value-def", @id = "Numero", @readonly = "readonly", @Value = ViewBag.NumeroRef })
                        @Html.ValidationMessageFor(model => model.Numero, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Tipo, new { @class = "col-md-3 horizontal-label" })
                    <div class="col-md-9 input-container">
                        @Html.DropDownListFor(model => model.Tipo.Id, (IEnumerable<SelectListItem>)ViewBag.Tipo, " Seleccione el tipo", new { @class = "textinput" })
                        @Html.ValidationMessageFor(model => model.Tipo.Id, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Detalle, new { @class = "col-md-3 horizontal-label" })
                    <div class="col-md-9 input-container">
                        @Html.TextBoxFor(model => model.Detalle, new { @class = "textinput" })
                        @Html.ValidationMessageFor(model => model.Detalle, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Fecha, new { @class = "col-md-4 horizontal-label" })
                    <div class="col-md-8 input-container">
                        <input class="text-box single-line textinput" data-val="true" data-val-required="La Fecha es requerida" id="Fecha" name="Fecha" type="text">
                        @Html.ValidationMessageFor(model => model.Fecha, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Total, new { @class = "col-md-3 horizontal-label readonly-label" })
                    <div class="col-md-9 input-container" >
                        @Html.TextBoxFor(model => model.Total, new { @class = "textinput", @id = "Total", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Total, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            
        </div>
    </fieldset>
}
<div class="row">
    <a class="boton place-right" id="agregarComprobantes">
        <i class="fa fa-plus-circle i-green"></i>Agregar Comprobantes
    </a>
</div>
@* Grilla con los comprobantes que voy a pagar ahora -->*@
<div class="table-container" id="GridDetallesOrden_Container">
    <table id="GridDetallesOrden"></table>
    <div id="GridDetallesOrden_pager"></div>
</div>

<div class="row" style="margin-top:20px;">
    <a class="boton place-right" id="agregarPagos">
        <i class="fa fa-plus-circle i-green"></i>Agregar Pago
    </a>
    <div class="col-md-5 place-right">
        @Html.Label("Tipo de Valor", new { @class = "col-md-4 horizontal-label" })
        <div class="col-md-8 input-container">
            @Html.DropDownListForWAD(model => model.Detalle, (SelectCombo)ViewBag.Valores, " Seleccione el tipo",null, new { @class = "textinput", @id = "TipoValor" })
        </div>
    </div>
    <div class="col-md-5 place-right">
        @Html.Label("Total de Pagos", new { @class = "col-md-4 horizontal-label readonly-label" })
        <div class="col-md-8 input-container">
            @Html.TextBox("TotalPagos", null, new { @class = "textinput", @id = "TotalPagos", @readonly="readonly" })
        </div>
    </div>
</div>
@* Grilla con los Valores que voy a emitir ahora -->*@
<div class="table-container last-bottom-margin" id="GridPagosOrden_Container">
    <table id="GridPagosOrden"></table>
    <div id="GridPagosOrden_pager"></div>
</div>

<div id="ComprobantesCompraAPagar-dialog"></div>
<div id="IngresoValores-dialog"></div>
<input type="hidden" id="needrefresh" value="0">
@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/select2")
    @Styles.Render("~/Scripts/select2/select2.css")
    @Scripts.Render("~/bundles/jqgrid")
    @Scripts.Render("~/Scripts/jquery.mask.min.js")
    @Scripts.Render("~/bundles/jqueryui")
    <script type="text/javascript">
    $.SetupUniqueNonQuitableForm('Esta saliendo de la creacion de comprobante. Si presiona Aceptar, todos los cambios realizados se perderan.');

    $(document).ready(function () {
        OrdenPago.init();
    });

    var rowIdAnt;
    var rowIdAct;
    var OrdenPago = {
        IdsGridRestricta: new Array(),


        init: function () {
            // Saca la validacion del Total
            $('#Total').attr("data-val", false);
            $('#comprobante-header').removeData('unobtrusiveValidation');
            $('#comprobante-header').removeData('validator');
            $.validator.unobtrusive.parse('#comprobante-header');

            $('#Tipo_Id').attr('data-val-required', 'Es necesario un tipo');
            $('#comprobante-header').reParseForm();

            $('#ProveedorID').change(OrdenPago.OnProveedorChange);
            $('#Proveedor_Id').select2(
               {
                   width:'100%',
                   placeholder: "Seleccione Un Proveedor",
                   minimumInputLength: 2,
                   ajax: {
                       url: "@Url.Action("GetProveedoresCombo", "Proveedores")",
                           dataType: 'json',
                           params: { type: "POST" },
                           data: function (t, p) {
                               return { where: t };
                           },
                           results: function (data, page) {
                               return { results: data.Data.Items };
                           }
                       }
                   });
                $('#Proveedor_Id').on("select2-selecting", OrdenPago.OnProveedorSelected);
                $("#Fecha").datepicker({ dateFormat: 'dd/mm/yy' });

                //Grilla de los comprobantes elegidos a abonar despues del popup
                $('#GridDetallesOrden').CreateCommonGrid({
                    datatype: 'local',
                    colNames: ['', '', '', 'Fecha', 'Número de Comprobante', 'Total', 'Total Abonado', 'Importe a Pagar'],
                    colModel: [
                        { name: 'Id', index: 'Id', width: 0, sortable: false, hidden: true, key: true },
                        { name: 'Comprobante_Id', index: 'Comprobante_Id', width: 0, sortable: false, hidden: true, key: true },
                        { name: 'Actions', index: 'Actions', width: 6, sortable: false, formatter: ABM_Eliminar, align: "center" },
                        { name: 'Fecha', index: 'Fecha', width: 30, align: "center", sortable: true, formatter: 'date', formatoptions: { newformat: 'd/m/Y' } },
                        { name: 'Numero', index: 'Numero', width: 30, align: "center", sortable: true },
                        { name: 'Total', index: 'Total', width: 20, align: "center", sortable: true, formatter: $.formatCurrency },
                        { name: 'TotalPagado', index: 'TotalPagado', width: 20, align: "center", sortable: true, formatter: $.formatCurrency },
                        { name: 'Importe', index: 'Importe', width: 20, align: "center", sortable: true, template: GridCurrencyTemplate, editrules: { custom:true, custom_func: OrdenPago.ValidateImporteChange} }
                    ],
                    sortname: 'Fecha',
                    sortorder: "asc",
                    pager: '#GridDetallesOrden_pager',
                    rowList: [5, 10, 15],
                    rowNum: 5,
                    cellEdit: true,
                    cellsubmit: 'clientArray',
                    afterEditCell: function (rowId, cellname, value, iRow, iCol) {
                        OrdenPago.AfterEditCell(rowIdAnt, rowId, cellname, value, iRow, iCol);
                    },
                    afterSaveCell: OrdenPago.CalcularTotal
                });
                $('#GridDetallesOrden').trigger("reloadGrid");
                $('#agregarComprobantes').on("click", OrdenPago.OnAgregarComprobantes);
                $('#agregarPagos').on("click", OrdenPago.OnAgregarValor);
                $("#GridDetallesOrden").parents('div.ui-jqgrid-bdiv').css("max-height", "150px");
                $(document).on('click', '.BtnEliminar', OrdenPago.OnEliminarClick);
                $('#BtnSubmit').on('click', OrdenPago.Save);
                IngresoValores.Init('#GridPagosOrden', '#TotalPagos');
                OrdenPago.ValidarTieneValores();
                OrdenPago.ControlarSelectUnico();
            },

            ControlarSelectUnico: function () {
                if (@ViewBag.Tipo.Count == 1) {
                    $('#Tipo_Id').attr('disabled', 'disabled');
                }
        },

        ValidarTieneValores: function () {
            if ($('#TipoValor option').length == 1) {
                var msg = 'No posee configurado ningún valor para poder realizar la cobranza.<br/> Puede configurar los mismos desde la seccion de Tesoreria.';
                return $.WarningDialog(msg, 'warning', function () {
                    window.location = '@Url.Action("Index", "Valores", new { Area = "Tesoreria" })';
                });
            }
        },

        ValidateImporteChange: function (value, colname) {
            var num = new Number(value);
            if (isNaN(num)) {
                return [false, 'El valor ingresado no es un número'];
            }
            var rowData = $('#GridDetallesOrden').getRowData(rowIdAct);
            // Validacion de Salida del Importe
            var maximoImporte = $.unformatCurrency(rowData.Total) - $.unformatCurrency (rowData.TotalPagado);
            if (value > maximoImporte) {
                return [false,'El importe es mayor a lo que se debe pagar de la factura' + $.formatCurrency(maximoImporte)];
            }
            return [true];
        },

        AfterEditCell: function (rowIdAnt, rowId, cellname, value, iRow, iCol) {
            if (rowIdAnt == undefined) {
                rowIdAnt = rowId;
            }
            rowIdAct = rowIdAnt;
            rowIdAnt = rowId;
            OrdenPago.CalcularTotal();
        },

        CalcularTotal: function(){
            var comprobantes = $("#GridDetallesOrden").jqGrid('getGridParam', 'data')
            var totalACancelar = 0;
            $.each(comprobantes, function (i, comp) {
                totalACancelar += $.unformatCurrency(Number(comp.Importe));
            });
            $('#Total').val($.formatCurrency(totalACancelar));
            return totalACancelar;
        },

        OnProveedorChange: function () {
            OrdenPago.ResetComprobantesGrid();
            var Id = $('#ProveedorID').val();
            if (Id != "" && (!$.isNumeric(Id) || Id <= 0)) {
                return $.WarningDialog('El N° de Proveedor no es correcto');
            }
            var params = {
                url: '@Url.Action("GetProveedor", "Proveedores")',
                data: { IdProveedor: Id },
                success: function (ret) {
                    if (ret.Success && ret.Data != null) {
                        var ProvYCuit = ret.Data.RazonSocial + '(' + ret.Data.CUIT + ')';
                        $('#Proveedor_Id').select2('data', { id: Id, text: ProvYCuit });
                        $('#Detalle').val('Pago a Proeedor: ' + ProvYCuit)
                    }
                    else {
                        // Not Found
                        $.WarningDialog('El Proveedor no existe!','error');
                        $('#Proveedor_Id').select2('data', null);
                    }
                }
            }
            $.AjaxPost(params);
        },

        OnProveedorSelected: function (e) {
            $('#ProveedorID').val(e.val)
        },


        ResetComprobantesGrid: function(){
            $("#GridDetallesOrden").jqGrid("clearGridData", true).trigger("reloadGrid");
            OrdenPago.IdsGridRestricta = [];
            IngresoValores.ClearValores();
            $('#Total').val("");
        },

        OnAgregarComprobantes: function (e) {
            if($('#Proveedor_Id').val() == ""){
                $.WarningDialog('Debe seleccionar un Proveedor!')
            }else{
                $('#ComprobantesCompraAPagar-dialog').OpenFormDialog(
                    '@Url.Action("ComprobantesAPagar", "ComprobantesCompras")?IdProveedor=' + $("#ProveedorID").val(),
                    '<i class="fa fa-folder-o"></i> Comprobantes a Pagar',
                { width: 800 });
            }
        },

        Save: function () {
            if ($('#BtnSubmit').attr('disabled') == "disabled" || $('#BtnSubmit').attr('disabled') == true)
                return;

            $('#BtnSubmit').attr('disabled', 'disabled');
            if (!$('#comprobante-header').valid()) {
                $('#BtnSubmit').removeAttr('disabled');
                return;
            }
            $('#Tipo_Id').attr('disabled', false);
            var eOrdenPago = $('#comprobante-header').serializeFormJSON();
            var comprobantesGrid = $('#GridDetallesOrden').jqGrid('getGridParam', 'data');
            if (comprobantesGrid.length == 0)
            {
                $('#BtnSubmit').removeAttr('disabled');
                $.WarningDialog('Es necesario que agregue al menos un comprobante.');
                return;
            }
            $('#GridDetallesOrden').jqGrid('editCell', 0, 0, false);

            eOrdenPago.Comprobantes = new Array();
            for (var i = 0; i < comprobantesGrid.length; i++) {
                if (comprobantesGrid[i].Importe <= 0) {
                    $('#BtnSubmit').removeAttr('disabled');
                    $.WarningDialog('Es necesario que el importe a pagar de todos los comprobantes sea mayor a cero');
                    return;
                }
                var item = {
                    ComprobanteCompra: { Id: comprobantesGrid[i].Id },
                    Importe: comprobantesGrid[i].Importe,
                    Pagado: comprobantesGrid[i].TotalPagado
                };
                eOrdenPago.Comprobantes.push(item);
            }
            var NoValoresErrorMsg = 'Es necesario que agregue al menos un medio de pago.';
            var Valores = IngresoValores.GetValores(NoValoresErrorMsg);
            var MsgErrorPagos = null;
            eOrdenPago.Pagos = new Array();
            $.each(Valores, function (i, valor) {
                if (valor.Importe <= 0) {
                    $('#BtnSubmit').removeAttr('disabled');
                    MsgErrorPagos = 'Es necesario que el importe de todos los medios de pago sea mayor a cero';
                    return false;
                }
                eOrdenPago.Pagos.push({ Id: 0, Valor: valor });
            });
            if (MsgErrorPagos != null) {
                $('#BtnSubmit').removeAttr('disabled');
                return $.WarningDialog(MsgErrorPagos);
            }
            var TotalPagos = IngresoValores.CalcularTotales();
            var TotalComprobantes = OrdenPago.CalcularTotal();
            if ($.parseCurrency(TotalPagos) != $.parseCurrency(TotalComprobantes)) {
                $('#BtnSubmit').removeAttr('disabled');
                $.WarningDialog('Hay una diferencia entre el saldo a cancelar y los pagos ingresados ');
                return;
            }

            if ($.parseCurrency(TotalPagos) <= 0 || $.parseCurrency(TotalComprobantes) <= 0) {
                $('#BtnSubmit').removeAttr('disabled');
                $.WarningDialog('El saldo de la orden de pago debe ser mayor a cero ');
                return;
            }

            var postParams = {
                url: "@Url.Action("Nuevo")",
                data: { OrdenPago: eOrdenPago },
                success: function (data) {
                    if (data.Success) {
                        if (data.NumeroRef != null) {
                            $.WarningDialog('El N° de Orden de Pago ha sido tomado, su nuevo N° es ' + data.NumeroRef, 'warning',
                                function () {
                                    OrdenPago.OnFinishSave(data.OrdenPago)
                                });
                        }
                        else {
                            OrdenPago.OnFinishSave(data.OrdenPago);
                        }
                    }
                    else {
                        $('#BtnSubmit').removeAttr('disabled');
                        $('#Alert-Container').NewAlert('error', data.ErrorMessage);
                    }
                }
            }
            $.AjaxPost(postParams);
        },

        OnEliminarClick: function () {
            var Id = $(this).closest('tr').attr('id');
            ConfirmationDialog.Show("Esta seguro que desea eliminar el comprobante?",
                    function () { OrdenPago.EliminarComprobante(Id) });
        },

        EliminarComprobante: function (Id) {
            indexDelet = OrdenPago.IdsGridRestricta.indexOf(Id);
            OrdenPago.IdsGridRestricta.splice(indexDelet, 1);
            $('#GridDetallesOrden').jqGrid('delRowData', Id);
            OrdenPago.CalcularTotal();
        },

        OnFinishSave: function (OP) {
            window.onbeforeunload = null;
            $.ShowLoader();
            window.location = '@Url.Action("Detalle")/' + OP.Id;
        },

        OnAgregarValor: function () {
            if ($('#Proveedor_Id').select2('data') == null) {
                $.WarningDialog('Debe elegir un proveedor antes de cargar un comprobante de pago!');
                return;
            }
            var tipo = $('#TipoValor').val();
            if (tipo != "" && tipo > 0) {
                $('.valid-custom.tipovalor').remove();
                IngresoValores.Nuevo(tipo, $('#TipoValor option:selected').data('ad'));
            } else {
                $('#TipoValor').parent().append("<span class='help-block field-validation-error valid-custom tipovalor' data-valmsg-for='TipoValor' data-valmsg-replace='true'><span for='TipoValor' generated='true' class=''>Es Necesario un Tipo de Valor</span></span>");
                return;
            }
        }
    }

    </script>
    @Html.Partial("~/Areas/Tesoreria/Views/Valores/js/_IngresoValores.cshtml");
}
